- 函数也是一个对象，对象能做的事函数都能做，但是函数的功能要比普通对象要强大（函数式JS中的一等公民）
- 函数中可以保存可执行的代码，并且可以在需要的时候反复调用
-以function开头的是函数，声明会被提升
- 创建函数：
    1.函数声明（会被提升）
         function 函数名（形参）{
             函数体
           }
    2.函数表达式（不会被提升）
        var 函数名 = function（形参）{
             函数体
          }
        立即执行函数表达式
           （function（）{}（））
- 函数中隐含的参数：
    -函数在调用时，解析器会传递两个隐含的参数：
       this
          -this是函数执行的上下文对象
          -根据函数的调用方式不同，this的值也不同
              1.以函数的形式调用时，this是window
              2.以方法的形式调用时，this是调用方法的对象
              3.以构造函数的形式调用时，this是新创建的对象
              4.以call（）和apply（）调用时，this是方法中的第一个参数
       arguments
           -arguments是实参对象，函数在调用时的实参都在该对象中封装
           - arguments是一个类数组（伪数组）对象
           - 通过arguments即使不定义形参，也可以使用实参
     - 函数的形参和实参
         - 形参（形式参数）
             -在定义函数时可以在函数中指定数量不等的形参
                  定义形参就相当于在函数中声明一个变量，但是并没有赋值
         -实参（实际参数）:
             -在调用函数时可以向函数中传递实参，实参会赋值给对应的形参
            function fn1（a ，b）{
               var a，b；
               }
               fn1（123,456）
      
